name: CI - Build, Test, and Lint Flask App

on:
  pull_request:
    branches: [master, develop]
  push:
    branches: [master, develop]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  DEFAULT_IMAGE_TAG: "latest"
  HOTFIX_IMAGE_TAG: "hotfix"
  IMAGE_NAME: myapp
  GIT_HASH: ${{ github.event.pull_request.head.sha }}
  # Replace with your JFrog credentials
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
  PR_JFROG_REPO: "dap-docker-public.artifactory.devops.org.net:5000"
  DEV_JFROG_REPO: "dap-docker-snapshots.artifactory.devops.org.net:5000"
  PROD_JFROG_REPO: "dap-docker-releases.artifactory.devops.org.net:5000"
  CURRENT_APP_VER:
  BRANCH_NAME:
  PROJECT_NAME: "myproject"

jobs:
  build-test-lint:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run Lint (Optional)
    - name: Lint code with flake8
      run: |
        pip install flake8
        flake8 main.py  # Add more files as needed

    # Run Unit Tests
    - name: Run tests
      run: |
        pytest  # Replace with your test framework if needed

    # Ensure Flask app starts up (Optional)
    - name: Test Flask startup
      run: |
        python main.py &
        sleep 5  # Wait for Flask to start
        curl http://127.0.0.1:8080  # Test if the app is running
